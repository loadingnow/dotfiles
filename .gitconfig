[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit -20 --date=iso
	lall = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=iso
	lc2 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --stat -C -2 --date=iso
	lme = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --author=c39 --date=iso
	lmec = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --author=c39 --stat -C  --date=iso

	# View the current working tree status using the short format
	s = status -s
	st = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	dh = diff HEAD
	dc = diff --staged
	dw = diff --word-diff
	dcw = diff --color-words
	df = diff --color --color-words --abbrev

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	ph = push
	pl = pull
	sync = !git pull && git push

	# Clone a repository including all submodules
	#c = clone --recursive

	# Commit all changes
	c = commit
	ci = commit
	cm = commit -m
	cam = commit -a -m
	cma = commit -a -m
	ca = !git add -A && git commit -av

	co = checkout

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	br = branch
	# set upstream 
	#branch -u origin/my_branch

	merged = branch --merged
	unmerged = branch --no-merged

	# reset
	# remove files from index (tracking)
  	#unstage = reset HEAD              
  	# go back before last commit, with files in uncommitted state
  	#uncommit = reset --soft HEAD^     

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	#branches = branch -a
	branches = branch -a -vv
	brs = branch -a -vv
	#remotes = remote -v
	remotes = remote show origin

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# 將當前工作目錄的檔案狀態強制變更為指定的分支
	# reset --hard origin/master

	# Credit an author on the latest commit
	#credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	#reb = "!r() { git rebase -i HEAD~$1; }; r"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	autocrlf = input

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]
	autocorrect = 1


[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
    tool = opendiff

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current

# rewrites
[url "git@github.com:"]
	insteadOf = "gh:"
	insteadOf = "git://github.com"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
	pushInsteadOf = "https://gist.github.com/"


# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules

[url "git@github.com:loadingnow/"]
  insteadOf = "git://github.com/loadingnow/"


[include]
  # For username / github token / etc
  path = ~/.gitconfig.local
  
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
